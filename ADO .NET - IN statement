using System;
using System.Data.SqlClient;


namespace PracticeCSharp
{

    struct stContact {
         public int ID , CountryID;
         public string FirstName;
         public string LastName;
         public string Address;
         public string Email;
         public string Phone;
    }

    class Program 

    {

        static string ConnectionString = "SERVER = localhost; Database = ContactsDB; User id = sa; Password = sa123456;";

        static int ReadCountry (string message)
        {
            Console.Write(message);
            string CountryName = Console.ReadLine();

            int ? CountryID = null;

            SqlConnection connection = new SqlConnection(ConnectionString);

            string query = "Select CountryID From Countries Where CountryName = @country ";

            SqlCommand command = new SqlCommand(query, connection);

            command.Parameters.AddWithValue("@country", CountryName);
            
            try
            {
                connection.Open();

                CountryID = (int?)command.ExecuteScalar();

                while (CountryID == null)
                {
                    Console.Write("Country Not Fount , Enter Again : ");
                    CountryName = Console.ReadLine();

                    command.Parameters.RemoveAt(0);
                    command.Parameters.AddWithValue("@country" , CountryName);

                    CountryID = (int?)command.ExecuteScalar();

                }
            }

            catch (Exception ex)
            {
                Console.WriteLine("Error , " + ex.Message);
            }

            return (int)CountryID;

        }
        static public stContact ReadContact() {

            Console.Write("FirstName : ");
            string FirstName = Console.ReadLine().Split(new[] { ' ' } )[0];
            
            Console.Write("LastName : ");
            string LastName = Console.ReadLine().Split(new[] { ' ' })[0];
            
            Console.Write("Phone : ");
            string Phone = Console.ReadLine().Split(new[] { ' ' })[0];

            Console.Write("Email : ");
            string Email = Console.ReadLine().Split(new[] { ' ' })[0];

            Console.Write("Address : ");
            string Address = Console.ReadLine();

            int Country = ReadCountry("Country Name : ");

            return new stContact
            {
                FirstName = FirstName,
                LastName = LastName,
                Phone = Phone,
                Email = Email,
                Address = Address,
                CountryID = Country

            };

        }
        public static void AddNewContact(stContact Contact)
        {

           
            SqlConnection connection = new SqlConnection(ConnectionString);

            string query = "Insert into Contacts (FirstName , LastName , Address , Email , Phone, CountryID )" +
                "values (@FirstName , @LastName , @Address , @Email , @Phone , @CountryID);" +
                "Select Scope_Identity()"; // this function will return the Generated ID for this record

            try
            {
                connection.Open();

                var command = new SqlCommand( query , connection);

                command.Parameters.AddWithValue("@FirstName", Contact.FirstName);
                command.Parameters.AddWithValue("@LastName", Contact.LastName);
                command.Parameters.AddWithValue("@Phone", Contact.Phone);
                command.Parameters.AddWithValue("@Address", Contact.Address);
                command.Parameters.AddWithValue("@Email", Contact.Email);
                command.Parameters.AddWithValue("@CountryID", Contact.CountryID);

                object result  = command.ExecuteScalar(); // we used scalar becaue it will execute the command and return a sigle value which is the result of Scope_Identity() function
                
                int ID;

                if (result != null && int.TryParse(result.ToString(), out ID)) {
                    Console.WriteLine($"Added Successfullt , ID : {ID}");
                }
                else
                {
                    Console.WriteLine("Adding New Contact Field :-(");
                }

                connection.Close();
                
            }
            catch(Exception ex)
            {
                Console.WriteLine("Error occured : " + ex.Message);
            }
        }
        public static void UpdateContact (int ContactID , stContact newContact )
        {

            SqlConnection connection = new SqlConnection(ConnectionString);

            string query = "Update Contacts set "+
                "FirstName = @FirstName," +
                "LastName = @LastName," +
                "Address = @Address," +
                "Email = @Email," +
                "Phone = @Phone," +
                "CountryID = @CountryID " +
                "Where ContactID = @ContactID";

            SqlCommand Command = new SqlCommand(query, connection);

            Command.Parameters.AddRange(new SqlParameter[]
            {
                new SqlParameter ("@FirstName" , newContact.FirstName),
                new SqlParameter ("@LastName" , newContact.LastName),
                new SqlParameter ("@Email" , newContact.Email),
                new SqlParameter ("@Phone" , newContact.Phone),
                new SqlParameter ("@Address" , newContact.Address),
                new SqlParameter ("@CountryID" , newContact.CountryID),
                new SqlParameter("@ContactID" , ContactID)
            });

            try
            {
                connection.Open();

                int RowsAffected = Command.ExecuteNonQuery();

                if (RowsAffected > 0)
                    Console.WriteLine("Updated successfully");
                else
                    Console.WriteLine("Updation failed");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error : " + ex.Message);
            }
            finally {
                connection.Close();
            }


        }
        public static bool DeleteContact (params int [] IDs)
        {
            bool IsSuccessed = false ;

            SqlConnection Connection = new SqlConnection(ConnectionString);

            string queryTemp = @"Delete From Contacts Where
                            ContactID IN (" + string.Join(",", IDs) + ")"; // not safe

            string query = $@"Delete From Contacts 
                            Where ContactID IN ({string.Join(",", IDs)})"; // safer

            SqlCommand Command = new SqlCommand(query, Connection);


            try
            {
                Connection.Open();

                int RowsAffected = Command.ExecuteNonQuery();

                if (RowsAffected > 0)
                    IsSuccessed = true;
                else
                    IsSuccessed = false;


            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error {ex.Message}");
            }
            finally
            {
                Connection.Close();
            }

            return IsSuccessed;
        }
        
        static void Main(string[] args)
        {

            if (DeleteContact(6))
                Console.WriteLine("Deleted Successfully");
            else
                Console.WriteLine("NOT Deleted");
        }
    }



}





